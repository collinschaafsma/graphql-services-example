// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Profile } from "./prisma-client";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsProfile {
    id: string;
  }

  export type ProfilesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export type ProfileResolver = (
    parent: undefined,
    args: ArgsProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | null | Promise<Profile | null>;

  export interface Type {
    profiles: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;

    profile: (
      parent: undefined,
      args: ArgsProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | null | Promise<Profile | null>;
  }
}

export namespace ProfileResolvers {
  export const defaultResolvers = {
    id: (parent: Profile) => parent.id,
    firstName: (parent: Profile) => parent.firstName,
    lastName: (parent: Profile) => parent.lastName,
    avatarUri: (parent: Profile) =>
      parent.avatarUri === undefined ? null : parent.avatarUri,
    createdAt: (parent: Profile) => parent.createdAt,
    updatedAt: (parent: Profile) => parent.updatedAt
  };

  export type IdResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstNameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AvatarUriResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstName: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    avatarUri: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateProfile {
    firstName: string;
    lastName: string;
    avatarUri: string | null;
  }

  export interface ArgsDeleteProfile {
    id: string;
  }

  export type CreateProfileResolver = (
    parent: undefined,
    args: ArgsCreateProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export type DeleteProfileResolver = (
    parent: undefined,
    args: ArgsDeleteProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | null | Promise<Profile | null>;

  export interface Type {
    createProfile: (
      parent: undefined,
      args: ArgsCreateProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;

    deleteProfile: (
      parent: undefined,
      args: ArgsDeleteProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | null | Promise<Profile | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Profile: ProfileResolvers.Type;
  Mutation: MutationResolvers.Type;
}
