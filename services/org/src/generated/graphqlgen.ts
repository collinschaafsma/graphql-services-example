// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Organization } from "./prisma-client";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsOrganization {
    id: string;
  }

  export type OrganizationsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization[] | Promise<Organization[]>;

  export type OrganizationResolver = (
    parent: undefined,
    args: ArgsOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | null | Promise<Organization | null>;

  export interface Type {
    organizations: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization[] | Promise<Organization[]>;

    organization: (
      parent: undefined,
      args: ArgsOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | null | Promise<Organization | null>;
  }
}

export namespace OrganizationResolvers {
  export const defaultResolvers = {
    id: (parent: Organization) => parent.id,
    name: (parent: Organization) => parent.name,
    createdAt: (parent: Organization) => parent.createdAt,
    updatedAt: (parent: Organization) => parent.updatedAt
  };

  export type IdResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateOrganization {
    name: string;
  }

  export interface ArgsDeleteOrganization {
    id: string;
  }

  export type CreateOrganizationResolver = (
    parent: undefined,
    args: ArgsCreateOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | Promise<Organization>;

  export type DeleteOrganizationResolver = (
    parent: undefined,
    args: ArgsDeleteOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | null | Promise<Organization | null>;

  export interface Type {
    createOrganization: (
      parent: undefined,
      args: ArgsCreateOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | Promise<Organization>;

    deleteOrganization: (
      parent: undefined,
      args: ArgsDeleteOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | null | Promise<Organization | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Organization: OrganizationResolvers.Type;
  Mutation: MutationResolvers.Type;
}
